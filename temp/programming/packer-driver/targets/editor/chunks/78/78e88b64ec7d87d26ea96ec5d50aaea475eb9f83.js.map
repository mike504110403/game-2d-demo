{"version":3,"sources":["file:///Users/mike/Documents/self/game-2d-demo/assets/scripts/components/PlatformGenerator.ts"],"names":["ccclass","property","cc","_decorator","PlatformGenerator","Prefab","Component","platforms","obstacles","lastPlatformX","lastPlatformY","onLoad","initializeGenerator","start","generateInitialPlatforms","update","deltaTime","cleanupOffscreenPlatforms","generateNewPlatforms","console","log","createPlatform","i","generateRandomPlatform","distance","minPlatformDistance","Math","random","maxPlatformDistance","height","clampedHeight","max","minPlatformHeight","min","maxPlatformHeight","x","y","platformWidth","platformHeight","obstacleChance","createObstacle","width","platform","Node","sprite","addComponent","Sprite","spriteFrame","createPlatformSpriteFrame","setPosition","setScale","collider","BoxCollider","size","offset","v2","rigidBody","RigidBody2D","type","Type","Static","node","addChild","push","obstacle","createObstacleSpriteFrame","camera","Camera","main","cameraX","position","cleanupDistance","length","destroy","splice","generateDistance","texture","Texture2D","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","strokeStyle","lineWidth","floor","beginPath","moveTo","lineTo","stroke","strokeRect","initWithElement","SpriteFrame","setTexture","closePath","fill","reset","forEach","setPlatformParameters","minDist","maxDist"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n/**\n * 平台生成器\n * 動態生成楓之谷風格的平台和障礙物\n */\n@ccclass('PlatformGenerator')\nexport class PlatformGenerator extends cc.Component {\n    @property(cc.Prefab)\n    platformPrefab: cc.Prefab = null;\n\n    @property(cc.Prefab)\n    obstaclePrefab: cc.Prefab = null;\n\n    @property\n    platformWidth: number = 150;\n\n    @property\n    platformHeight: number = 30;\n\n    @property\n    minPlatformDistance: number = 200;\n\n    @property\n    maxPlatformDistance: number = 400;\n\n    @property\n    minPlatformHeight: number = -200;\n\n    @property\n    maxPlatformHeight: number = 200;\n\n    @property\n    obstacleChance: number = 0.3;\n\n    private platforms: cc.Node[] = [];\n    private obstacles: cc.Node[] = [];\n    private lastPlatformX: number = 0;\n    private lastPlatformY: number = 0;\n\n    onLoad() {\n        this.initializeGenerator();\n    }\n\n    start() {\n        this.generateInitialPlatforms();\n    }\n\n    update(deltaTime: number) {\n        this.cleanupOffscreenPlatforms();\n        this.generateNewPlatforms();\n    }\n\n    /**\n     * 初始化生成器\n     */\n    private initializeGenerator(): void {\n        console.log('平台生成器初始化完成');\n    }\n\n    /**\n     * 生成初始平台\n     */\n    private generateInitialPlatforms(): void {\n        // 生成起始平台\n        this.createPlatform(0, -300, 300, 100); // 地面\n        \n        // 生成一些初始平台\n        for (let i = 0; i < 5; i++) {\n            this.generateRandomPlatform();\n        }\n    }\n\n    /**\n     * 生成隨機平台\n     */\n    private generateRandomPlatform(): void {\n        const distance = this.minPlatformDistance + \n            Math.random() * (this.maxPlatformDistance - this.minPlatformDistance);\n        \n        const height = this.lastPlatformY + \n            (Math.random() - 0.5) * 200;\n        \n        const clampedHeight = Math.max(this.minPlatformHeight, \n            Math.min(this.maxPlatformHeight, height));\n        \n        const x = this.lastPlatformX + distance;\n        const y = clampedHeight;\n        \n        this.createPlatform(x, y, this.platformWidth, this.platformHeight);\n        \n        // 隨機添加障礙物\n        if (Math.random() < this.obstacleChance) {\n            this.createObstacle(x, y + this.platformHeight / 2 + 50);\n        }\n        \n        this.lastPlatformX = x;\n        this.lastPlatformY = y;\n    }\n\n    /**\n     * 建立平台\n     */\n    private createPlatform(x: number, y: number, width: number, height: number): cc.Node {\n        const platform = new cc.Node('Platform');\n        \n        // 添加精靈組件\n        const sprite = platform.addComponent(cc.Sprite);\n        sprite.spriteFrame = this.createPlatformSpriteFrame(width, height);\n        \n        // 設定位置和大小\n        platform.setPosition(x, y);\n        platform.setScale(1, 1);\n        \n        // 添加物理碰撞\n        const collider = platform.addComponent(cc.BoxCollider);\n        collider.size = cc.size(width, height);\n        collider.offset = cc.v2(0, 0);\n        \n        // 添加剛體\n        const rigidBody = platform.addComponent(cc.RigidBody2D);\n        rigidBody.type = cc.RigidBody2D.Type.Static;\n        \n        this.node.addChild(platform);\n        this.platforms.push(platform);\n        \n        return platform;\n    }\n\n    /**\n     * 建立障礙物\n     */\n    private createObstacle(x: number, y: number): cc.Node {\n        const obstacle = new cc.Node('Obstacle');\n        \n        // 添加精靈組件\n        const sprite = obstacle.addComponent(cc.Sprite);\n        sprite.spriteFrame = this.createObstacleSpriteFrame();\n        \n        // 設定位置\n        obstacle.setPosition(x, y);\n        \n        // 添加物理碰撞\n        const collider = obstacle.addComponent(cc.BoxCollider);\n        collider.size = cc.size(30, 50);\n        \n        // 添加剛體\n        const rigidBody = obstacle.addComponent(cc.RigidBody2D);\n        rigidBody.type = cc.RigidBody2D.Type.Static;\n        \n        this.node.addChild(obstacle);\n        this.obstacles.push(obstacle);\n        \n        return obstacle;\n    }\n\n    /**\n     * 清理螢幕外的平台\n     */\n    private cleanupOffscreenPlatforms(): void {\n        const camera = cc.Camera.main;\n        if (!camera) return;\n        \n        const cameraX = camera.node.position.x;\n        const cleanupDistance = 1000; // 清理距離\n        \n        // 清理平台\n        for (let i = this.platforms.length - 1; i >= 0; i--) {\n            const platform = this.platforms[i];\n            if (platform && platform.position.x < cameraX - cleanupDistance) {\n                platform.destroy();\n                this.platforms.splice(i, 1);\n            }\n        }\n        \n        // 清理障礙物\n        for (let i = this.obstacles.length - 1; i >= 0; i--) {\n            const obstacle = this.obstacles[i];\n            if (obstacle && obstacle.position.x < cameraX - cleanupDistance) {\n                obstacle.destroy();\n                this.obstacles.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * 生成新平台\n     */\n    private generateNewPlatforms(): void {\n        const camera = cc.Camera.main;\n        if (!camera) return;\n        \n        const cameraX = camera.node.position.x;\n        const generateDistance = 800; // 生成距離\n        \n        // 如果最後一個平台距離相機太遠，生成新平台\n        if (this.lastPlatformX < cameraX + generateDistance) {\n            this.generateRandomPlatform();\n        }\n    }\n\n    /**\n     * 建立平台精靈框架\n     */\n    private createPlatformSpriteFrame(width: number, height: number): cc.SpriteFrame {\n        const texture = new cc.Texture2D();\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        \n        // 繪製木質平台\n        ctx.fillStyle = '#8B4513';\n        ctx.fillRect(0, 0, width, height);\n        \n        // 添加木紋\n        ctx.strokeStyle = '#654321';\n        ctx.lineWidth = 2;\n        for (let i = 0; i < Math.floor(width / 30); i++) {\n            ctx.beginPath();\n            ctx.moveTo(i * 30, 0);\n            ctx.lineTo(i * 30, height);\n            ctx.stroke();\n        }\n        \n        // 添加邊框\n        ctx.strokeStyle = '#4A2C2A';\n        ctx.lineWidth = 3;\n        ctx.strokeRect(0, 0, width, height);\n        \n        texture.initWithElement(canvas);\n        const spriteFrame = new cc.SpriteFrame();\n        spriteFrame.setTexture(texture);\n        return spriteFrame;\n    }\n\n    /**\n     * 建立障礙物精靈框架\n     */\n    private createObstacleSpriteFrame(): cc.SpriteFrame {\n        const texture = new cc.Texture2D();\n        const canvas = document.createElement('canvas');\n        canvas.width = 30;\n        canvas.height = 50;\n        const ctx = canvas.getContext('2d');\n        \n        // 繪製尖刺障礙物\n        ctx.fillStyle = '#8B0000';\n        ctx.beginPath();\n        ctx.moveTo(15, 0);\n        ctx.lineTo(0, 50);\n        ctx.lineTo(30, 50);\n        ctx.closePath();\n        ctx.fill();\n        \n        // 添加高光\n        ctx.fillStyle = '#FF0000';\n        ctx.beginPath();\n        ctx.moveTo(15, 0);\n        ctx.lineTo(5, 40);\n        ctx.lineTo(25, 40);\n        ctx.closePath();\n        ctx.fill();\n        \n        texture.initWithElement(canvas);\n        const spriteFrame = new cc.SpriteFrame();\n        spriteFrame.setTexture(texture);\n        return spriteFrame;\n    }\n\n    /**\n     * 重置生成器\n     */\n    public reset(): void {\n        // 清理所有平台和障礙物\n        this.platforms.forEach(platform => platform.destroy());\n        this.obstacles.forEach(obstacle => obstacle.destroy());\n        \n        this.platforms = [];\n        this.obstacles = [];\n        this.lastPlatformX = 0;\n        this.lastPlatformY = 0;\n        \n        this.generateInitialPlatforms();\n    }\n\n    /**\n     * 設定平台參數\n     */\n    public setPlatformParameters(width: number, height: number, minDist: number, maxDist: number): void {\n        this.platformWidth = width;\n        this.platformHeight = height;\n        this.minPlatformDistance = minDist;\n        this.maxPlatformDistance = maxDist;\n    }\n}\n"]}