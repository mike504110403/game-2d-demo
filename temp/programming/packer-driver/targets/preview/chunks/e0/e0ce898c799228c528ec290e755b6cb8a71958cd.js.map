{"version":3,"sources":["file:///Users/mike/Documents/self/game-2d-demo/assets/scripts/managers/InputManager.ts"],"names":["ccclass","property","cc","_decorator","InputManager","Component","inputStates","getInstance","_instance","onLoad","initializeInput","moveLeft","moveRight","jump","attack","systemEvent","on","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","console","log","event","keyCode","macro","KEY","left","a","right","d","space","up","w","j","isInputPressed","inputName"],"mappings":"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","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n/**\n * 輸入管理器\n * 負責處理所有輸入事件，包括鍵盤和觸控\n */\n@ccclass('InputManager')\nexport class InputManager extends cc.Component {\n    private static _instance: InputManager | null = null;\n    \n    // 輸入狀態\n    private inputStates: { [key: string]: boolean } = {};\n\n    /**\n     * 取得輸入管理器實例\n     */\n    public static getInstance(): InputManager | null {\n        return InputManager._instance;\n    }\n\n    onLoad() {\n        InputManager._instance = this;\n        this.initializeInput();\n    }\n\n    /**\n     * 初始化輸入系統\n     */\n    private initializeInput(): void {\n        // 初始化輸入狀態\n        this.inputStates = {\n            moveLeft: false,\n            moveRight: false,\n            jump: false,\n            attack: false\n        };\n\n        // 註冊鍵盤事件\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n\n        console.log('輸入管理器初始化完成');\n    }\n\n    /**\n     * 鍵盤按下事件\n     */\n    private onKeyDown(event: cc.Event.EventKeyboard): void {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.a:\n                this.inputStates.moveLeft = true;\n                break;\n            case cc.macro.KEY.right:\n            case cc.macro.KEY.d:\n                this.inputStates.moveRight = true;\n                break;\n            case cc.macro.KEY.space:\n            case cc.macro.KEY.up:\n            case cc.macro.KEY.w:\n                this.inputStates.jump = true;\n                break;\n            case cc.macro.KEY.j:\n                this.inputStates.attack = true;\n                break;\n        }\n    }\n\n    /**\n     * 鍵盤釋放事件\n     */\n    private onKeyUp(event: cc.Event.EventKeyboard): void {\n        switch(event.keyCode) {\n            case cc.macro.KEY.left:\n            case cc.macro.KEY.a:\n                this.inputStates.moveLeft = false;\n                break;\n            case cc.macro.KEY.right:\n            case cc.macro.KEY.d:\n                this.inputStates.moveRight = false;\n                break;\n            case cc.macro.KEY.space:\n            case cc.macro.KEY.up:\n            case cc.macro.KEY.w:\n                this.inputStates.jump = false;\n                break;\n            case cc.macro.KEY.j:\n                this.inputStates.attack = false;\n                break;\n        }\n    }\n\n    /**\n     * 檢查輸入狀態\n     */\n    public isInputPressed(inputName: string): boolean {\n        return this.inputStates[inputName] || false;\n    }\n}"]}